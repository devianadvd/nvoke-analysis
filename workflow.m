% 1. Process nVoke recorded files in recording folder: PP, BP, MC and DFF. Copy these files and GPIO
% info to project folder
nvoke_file_process;

% 2. Draw ROIs with Inscopix Data Processing Software (IDPS)
% 	- Export ROI info as .csv
% 	- Export GPIO info as .csv if exists
% 	- Check each recording with plot app: 'D:\guoda\Documents\MATLAB\Codes\nvoke-analysis\plot_roi_gpio_App.mlapp'
		plot_roi_gpio_App.mlapp

% 3. Convert ROI info to matlab file (.m). Copy ROI info (csv files) to analysis folder, and run this
% function
[ROIdata, recording_num, cell_num] = ROIinfo2matlab;
[ROIdata, recording_num, cell_num] = ROI_matinfo2matlab;

%%
% 4. Check data with plot function 
plot_save = 2; % 0-no plot. 1-plot. 2-plot and save
% pause_plot = 1; % pause after plot of one recording
subplot_roi = 2;
pause_plot = 0; % plot without pause
 
[ROIdata_peakevent] = nvoke_event_detection(ROIdata, plot_save, subplot_roi, pause_plot); % plot with pause. (ROIdata, 2, 1) plot and save with pause

%%
% manully delet bad ROIs
nvoke_data = ROIdata; % specify the variable containing all ROI_data
rec_row = 3; % specify recording number
roiID = [1 3]; % specify roi needed to be deleted

% data_decon = nvoke_data{rec_row,2}.decon;
% data_raw = nvoke_data{rec_row,2}.raw;

nvoke_data{rec_row,2}.decon(:, (roiID+1)) = [];
nvoke_data{rec_row,2}.raw(:, (roiID+1)) = [];

ROIdata = nvoke_data;

% data_decon(:, (roiID+1)) = [];
% data_raw(:, (roiID+1)) = [];

%%
% load roidata (ROIdata, ROIdata_peakevent, modified_ROIdata, etc.) from file
if ispc
elseif isunix
	peak_sheet_folder = '/home/guoda/Documents/Workspace/Analysis/nVoke/Ventral_approach/processed mat files/';
end
[roidata_fn, roidata_folder]=uigetfile([peak_sheet_folder, '*.mat'],...
	'Select a file with roidata (generated by event_detection/correct_peakdata) in it');
roidata_path = fullfile(roidata_folder, roidata_fn);
if roidata_fn~=0
	load(roidata_path)
	roidata_var_name = who('-file', roidata_path);
	if ~exist('roidata_loading_log', 'var')
		pslrn = 1; % roidata_log_row_num
	else
		pslrn = size(roidata_loading_log, 1)+1;
	end
	roidata_loading_log{pslrn, 1} = roidata_var_name{1};
	roidata_loading_log{pslrn, 2} = roidata_fn;
	roidata_loading_log{pslrn, 3} = datestr(datetime('now'), 'yyyymmdd HH:MM:SS');
end


%%
% 5. Delete bad/usless cells in ROIdata generated by previous steps. Check data with plot function again
plot_save = 0; % 0-no plot. 1-plot. 2-plot and save
% pause_plot = 1; % pause after plot of one recording
subplot_roi = 2;
pause_plot = 0; % plot with (1) or without (0) pause


[modified_ROIdata] = nvoke_correct_peakdata(ROIdata_peakevent,plot_save,subplot_roi,pause_plot); 

%%
% 6. Check peaks and their start and end point. Manully correct these numbers and go through step 5 function.
plot_save = 2; % 0-no plot. 1-plot. 2-plot and save
% pause_plot = 1; % pause after plot of one recording
subplot_roi = 2;
pause_plot = 0; % plot without pause
[modified_ROIdata] = nvoke_correct_peakdata(modified_ROIdata,plot_save,subplot_roi,pause_plot); % save plots with pauses 

%%
% 7. Rasterplot
[rec, peak_table] = ctraster(ROIdata_peakevent);
[rec, peak_table] = ctraster(ROIdata_peakevent, 5, 0); % ctraster(Input, sort_col, save_plot, stim_duration, pre_stim_duration, post_stim_duration)
													   % sort_col: 5-peakTotal, 6-prePeak, 7-peakDuringStim, 8-postPeak, 
													   % 9-prePeakDpeakTotal, 10-peakDuringStimDpeakTotal, 11-postPeakDpeakTotal


save_plot = 0;
for sortn = 6:15
	close all
    [rec, peaktable]=ctraster(ROIdata_peakevent, sortn, save_plot);
end	

%%
% 8. Calculate peak amplitude, rise and decay duration. Plot correlations
plot_analysis = 2; % 0-no plot. 1-plot. 2-plot and save

% stimulation = 'ogled10s_fast_peak'; % to save peak_info_sheet var
stimulation = input('Input info including stimulation for the name of the file saving peak_info_sheet var: ', 's');
if ispc
	HDD_folder = 'G:\Workspace\Inscopix_Seagate\Analysis\IO_GCaMP-IO_ChrimsonR-CN_ventral\'; % to save peak_info_sheet var
	workspace_folder = 'D:\guoda\Documents\Workspace\Analysis\nVoke\Ventral_approach\processed mat files\'; % to save peak_info_sheet var
elseif isunix
	workspace_folder = '/home/guoda/Documents/Workspace/Analysis/nVoke/Ventral_approach/processed mat files/';
end

if isempty(modified_ROIdata{1, 3}) 
	triggeredPeak_filter_max = 0;
else
	triggeredPeak_filter_max = 2;
end

for triggeredPeak_filter = 0:triggeredPeak_filter_max
	% triggeredPeak_filter;
	switch triggeredPeak_filter
	case 0
		display(['trigger filter: ', num2str(triggeredPeak_filter), ': all peaks used'])
	case 1
		display(['trigger filter: ', num2str(triggeredPeak_filter), ': excited peaks used. peaks with rise point during stimulation'])
	case 2
		display(['trigger filter: ', num2str(triggeredPeak_filter), ': non-excited peaks used. peaks with rise point outside of stimulation'])
	end
	[peak_info_sheet, total_cell_num, total_peak_num] = nvoke_event_calc(modified_ROIdata, plot_analysis, triggeredPeak_filter);

	peak_sheet_fn = ['peak_info_sheet_', datestr(datetime('now'), 'yyyymmdd'), '_', stimulation, '_trig', num2str(triggeredPeak_filter)];
	HDD_path = fullfile(HDD_folder, peak_sheet_fn);
	workspace_path = fullfile(workspace_folder, peak_sheet_fn);
	if ispc
		save(HDD_path, 'peak_info_sheet');
	end
	save(workspace_path, 'peak_info_sheet');
end

% % save peak_info_sheet
% peak_sheet_fn = 'peak_info_sheet_20200526_ogled10s_trig2';
% HDD_folder = 'G:\Workspace\Inscopix_Seagate\Analysis\IO_GCaMP-IO_ChrimsonR-CN_ventral';
% workspace_folder = 'D:\guoda\Documents\Workspace\Analysis\nVoke\Ventral_approach\processed mat files';

% HDD_path = fullfile(HDD_folder, peak_sheet_fn);
% workspace_path = fullfile(workspace_folder, peak_sheet_fn);

% save(HDD_path, 'peak_info_sheet');
% save(workspace_path, 'peak_info_sheet');

%%
% assign peak_info_sheet var to a single structure var with filename and datetime info
if ~exist('peak_sheet_folder', 'var')
	if ispc
		peak_sheet_folder = 'G:\Workspace\Inscopix_Seagate\Analysis\IO_GCaMP-IO_ChrimsonR-CN_ventral\';
	elseif isunix
		peak_sheet_folder = '/home/guoda/Documents/Workspace/Analysis/nVoke/Ventral_approach/processed mat files/';
	end
end
[peak_sheet_fn, peak_sheet_folder]=uigetfile([peak_sheet_folder, '*.mat'], 'Select a file with peak_info_sheet variable in it');
peak_sheet_path = fullfile(peak_sheet_folder, peak_sheet_fn);
if peak_sheet_fn~=0
	load(peak_sheet_path)
	% new_peak_sheet_var_name = input('Input a new name for loaded variable - peak_sheet_info: ', 's');
	% new_peak_sheet_var_name = matlab.lang.makeValidName(new_peak_sheet_var_name); % make sure var name is valid
	% new_peak_sheet_var_name = matlab.lang.makeUniqueStrings(new_peak_sheet_var_name); % make sure var name is unique
	% eval([new_peak_sheet_var_name, '=peak_sheet_info']);

	if ~exist('peak_sheet_multi', 'var')
		psmn = 1; % peak_sheet_multi_num: number of peak sheets
	else
		psmn = size(peak_sheet_multi, 2)+1;
	end
	peak_sheet_multi(psmn).filename = peak_sheet_fn;
	peak_sheet_multi(psmn).value = array2table(peak_info_sheet,...
		'VariableNames', {'recNo', 'roiNo', 'peakStart', 'peakEnd', 'riseDuration', 'decayDuration', 'wholeDuration', 'peakAmp', 'peakSlope', 'peakZscore', 'peakNormHP', 'peakTriggered'});
	peak_sheet_multi(psmn).loadedT = datestr(datetime('now'), 'yyyymmdd');
	display(['file [', peak_sheet_fn, '] loaded into peak_sheet_multi. peak_sheet_multi size: ', num2str(size(peak_sheet_multi, 2))])

	% if ~exist(peak_sheet_loading_log)
	% 	pslrn = 1; % peak_sheet_log_row_num
	% else
	% 	pslrn = size(peak_sheet_loading_log, 1)+1;
	% end
	% peak_sheet_loading_log{pslrn, 1} = new_peak_sheet_var_name;
	% peak_sheet_loading_log{pslrn, 2} = peak_sheet_fn;
	% peak_sheet_loading_log{pslrn, 3} = datestr(datetime('now'));
end



%% Save peak_sheet_multi generated in last section
if ispc
	peak_sheet_folder = 'G:\Workspace\Inscopix_Seagate\Analysis\IO_GCaMP-IO_ChrimsonR-CN_ventral\';
elseif isunix
	peak_sheet_folder = '/home/guoda/Documents/Workspace/Analysis/nVoke/Ventral_approach/processed mat files/';
end
psm_fn = ['peak_sheet_multi_', datestr(datetime('now'), 'yyyymmdd'), '.mat'];
cd(peak_sheet_folder);
% psm_path = fullfile(peak_sheet_folder, psm_fn)
[psm_fn, psm_folder] = uiputfile(psm_fn,...
	'Save peak_sheet_multi var in a mat file');
psm_path = fullfile(psm_folder, psm_fn);
if psm_fn==0 
	display('No file selected. peak_sheet_multi not saved')
else
	if exist('peak_sheet_multi')
		save(psm_path, 'peak_sheet_multi')
		display(['peak_sheet_multi saved to: ', psm_path])
	end
end





%% load peak_sheet_multi var and group values from multiple stimulation and filters into a single table
if ispc
	peak_sheet_folder = 'G:\Workspace\Inscopix_Seagate\Analysis\IO_GCaMP-IO_ChrimsonR-CN_ventral\';
elseif isunix
	peak_sheet_folder = '/home/guoda/Documents/Workspace/Analysis/nVoke/Ventral_approach/processed mat files/';
end
[psm_fn, psm_folder] = uigetfile([peak_sheet_folder, '*peak_sheet_multi*.mat'],...
	'Select a file with variable peak_sheet_multi');
if psm_fn~=0
	psm_path = fullfile(psm_folder, psm_fn);
	load(psm_path)
	stimuli_filter_num = size(peak_sheet_multi, 2); % number of groups (seperated by various stimuli and filters)
	column_name = cell(1, stimuli_filter_num); % pre-allocate. strings of different stimuli-filter groups
	for sfn = 1:stimuli_filter_num
		peakNum(sfn)=size(peak_sheet_multi(sfn).value, 1); % number of peaks in each stimuli-filter group
		column_name{sfn} = input(['rename group [', peak_sheet_multi(sfn).filename, ']: '], 's');
	end

	peak_info_rowsize = max(peakNum); % row number of peak_info varibales 
	peak_info_rise = NaN(peak_info_rowsize, stimuli_filter_num); % pre-allocate
	peak_info_amp = NaN(peak_info_rowsize, stimuli_filter_num); % pre-allocate
	peak_info_slope = NaN(peak_info_rowsize, stimuli_filter_num); % pre-allocate
	peak_info_zscore = NaN(peak_info_rowsize, stimuli_filter_num); % pre-allocate
	peak_info_normhp = NaN(peak_info_rowsize, stimuli_filter_num); % pre-allocate

	for sfn = 1:stimuli_filter_num
		% varible strings can be found above. search: peak_sheet_multi
		% 'recNo', 'roiNo', 'peakStart', 'peakEnd', 'riseDuration', 'decayDuration',... 
		% 'wholeDuration', 'peakAmp', 'peakSlope', 'peakZscore', 'peakNormHP', 'peakTriggered'
		peak_info_rise(1:peakNum(sfn), sfn) = peak_sheet_multi(sfn).value{:, 'riseDuration'};
		peak_info_amp(1:peakNum(sfn), sfn) = peak_sheet_multi(sfn).value{:, 'peakAmp'};
		peak_info_slope(1:peakNum(sfn), sfn) = peak_sheet_multi(sfn).value{:, 'peakSlope'};
		peak_info_zscore(1:peakNum(sfn), sfn) = peak_sheet_multi(sfn).value{:, 'peakZscore'};
		peak_info_normhp(1:peakNum(sfn), sfn) = peak_sheet_multi(sfn).value{:, 'peakNormHP'};
	end
	peak_info_rise = array2table(peak_info_rise, 'VariableNames', column_name);
	peak_info_amp = array2table(peak_info_amp, 'VariableNames', column_name);
	peak_info_slope = array2table(peak_info_slope, 'VariableNames', column_name);
	peak_info_zscore = array2table(peak_info_zscore, 'VariableNames', column_name);
	peak_info_normhp = array2table(peak_info_normhp, 'VariableNames', column_name);
end

cd(psm_folder) 
psmo_fn = [datestr(datetime('now'), 'yyyymmdd'), 'peak_sheet_multi_organized.mat']; % peak_sheet_multi_organized
[psmo_fn, psmo_folder] = uiputfile(psmo_fn,...
	'Save organized peak_info (multiple vars for statistics and plots) in a single file');
psmo_path = fullfile(psmo_folder, psmo_fn);
if psmo_fn==0 
	display('No file selected. Organized peak info not saved')
else
	if exist('peak_info_rise')
		save(psmo_path, 'peak_info_rise', 'peak_info_amp', 'peak_info_slope', 'peak_info_zscore', 'peak_info_normhp')
		display(['peak_sheet_multi saved to: ', psm_path])
	end
end



%%
peak_info_array = peak_info_sheet(:, [5 8 9]); % N x P matrix. N peaks, P variables
% 5-rise duration
% 8-peak amplitude
% 9-peak slope
% 10-peak zscore
% 11-peak normhp

% estimate cluster numbers 
peak_clucster_func = @(X, K)(kmeans(X, K, 'emptyaction', 'singleton', 'replicate', 5));
eva = evalclusters(peak_info_array, peak_clucster_func, 'CalinskiHarabasz', 'klist', 'klist', [1:6])
eva.OptimalK;