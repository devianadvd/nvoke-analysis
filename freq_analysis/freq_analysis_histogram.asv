function [event_histcounts,stim_num,varargout] = freq_analysis_histogram(all_trial_data,varargin)
    % Return event_info (table) of multiple rois from the same trial
    %   trial_data: a cell array containing information of 1 single trial 
    %	stimulation_win: 2-col number array. lower bounds are the starts of windows, and upper bounds are the ends
    %   recording_time: single column array from decon or raw data   
    % Note: peak info from lowpassed data is used

    % Extract useful info from trial data
    rec_name_col = 1;
    trace_col = 2;
    stim_str_col = 3;
    gpio_col = 4;
    peak_info_col = 5;

    % recording_name = trial_data{rec_name_col};
    % recording_time = trial_data{trace_col}.raw.Time;
    stimulation_win = all_trial_data{1, gpio_col}(3).stim_range; % 3 is the first gpio channel used for stimulation. if 2 stimuli were used, 4 is the second
    % stimulation_repeat = size(stimulation_win, 1);
    % peak_info_table = trial_data{peak_info_col};
    
    % settings
    setting.stim_time_error = 0; % due to low temperal resolution and error in lowpassed data, start and end time point of stimuli can be extended
    setting.stim_winT = stimulation_win(1, 2)-stimulation_win(1, 1); % the duration of stimulation 
    setting.rebound_winT = 1; % second. rebound window duration
    setting.sortout_event = 'rise'; % use rise location to sort peak
    setting.pre_stim_duration = 10; % seconds
    setting.post_stim_duration = 10; % seconds
    setting.min_spont_freq = 0; % event will be used for histogram if its ROI spontaneous frequency if higher than this

    % Optionals
    for ii = 1:2:(nargin-1)
    	if strcmpi('stim_time_error', varargin{ii})
    		setting.stim_time_error = varargin{ii+1};
    	elseif strcmpi('stim_winT', varargin{ii})
    		setting.stim_winT = varargin{ii+1};
    	% elseif strcmpi('rebound_winT', varargin{ii})
    	% 	setting.rebound_winT = varargin{ii+1};
    	elseif strcmpi('sortout_event', varargin{ii})
    		setting.sortout_event = varargin{ii+1};
        elseif strcmpi('pre_stim_duration', varargin{ii})
            setting.pre_stim_duration = varargin{ii+1};
    	elseif strcmpi('post_stim_duration', varargin{ii})
            setting.post_stim_duration = varargin{ii+1};
        elseif strcmpi('min_spont_freq', varargin{ii})
            setting.min_spont_freq = varargin{ii+1};
        elseif strcmpi('nbins', varargin{ii})
            nbins = varargin{ii+1};
        end
    end

    % Main contents
    [event_info_all_trials,stim_num,setting] = freq_analysis_events_info_allTrials(all_trial_data,...
        'stim_time_error', setting.stim_time_error, 'stim_winT', setting.stim_winT,...
            'sortout_event', setting.sortout_event,...
            'pre_stim_duration', setting.pre_stim_duration, 'post_stim_duration', setting.post_stim_duration);

    event_idx_high_freq_rois = event_info_all_trials.spont_event_freq >= setting.min_spont_freq;
    event_info_high_freq_rois = event_info_all_trials(event_idx_high_freq_rois, :);


    if exist('nbins', 'var')
        [event_histcounts,edges]=histcounts(event_info_high_freq_rois.event_time_2_stim, nbins);
        setting.nbins = nbins;
    else
        [event_histcounts,edges]=histcounts(event_info_high_freq_rois.event_time_2_stim);
    end

    figure; 
    hold on
    histplot = histogram('BinEdges', edges, 'BinCounts', event_histcounts);
    axesInfo = gca;

    stim_patch(:, 1) = [0 0 setting.stim_winT setting.stim_winT];
    stim_patch(:, 2) = [axesInfo.YLim(1) axesInfo.YLim(2) axesInfo.YLim(2) axesInfo.YLim(1)];
    connect_order = [1 2 3 4];
    patch('Faces', connect_order, 'Vertices', stim_patch,...
        'FaceColor', '#E895EB', 'EdgeColor', 'none', 'FaceAlpha', 0.5)
    
    varargout{1} = setting;
    varargout{2} = event_info_high_freq_rois;
end